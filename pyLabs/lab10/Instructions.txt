Lab 10 Instructions / Description

Write a Python application that uses recursion to generate all possible anagrams for a phrase taken from user input, then prints those that consist only of valid English words. Treat blanks as characters; you do not need to generate anagrams that contain more or less blanks than are present in the input phrase. Convert all letters to lower case before you generate the anagrams. The output must not contain any duplicates (hint: use a set, not a list). For example, if the input phrase is 'more money', the output is as follows:

room enemy
more money
moor yemen
mono emery

[ many lines omitted here ]

emery mono
memory one
enemy room
mo moneyer
mere moony
eon memory

The output does not contain, for example, 'ro emnemyo', or any other anagrams that do not consist entirely of valid words.

Use the file wordsEn.txt, which is linked from the course web page, as the source of the list of valid English words. Do *not* copy and paste from the file, write code to read it in. Use an iterator to read one line at a time. Each line of the file contains one word. Strip any whitespace from each line and make sure you do not add any newlines to the word list (the total number of words should be about 109,000).

Here is pseudocode for generating anagrams recursively. There are much better ways to generate anagrams, but do it this way:

if text.length == 1
    return {letters} # Set containing one string. When created, the list will consist of one string with one letter, but it is a set of strings, not a set of chars.
else
            ret = set()
            for each letter in the string
                anagramize the rest of the string

                add to the set each of the anagrams prepended by the letter you left out
            return ret   

For example, you would anagramize the string 'the' by anagramizing 'he', 'te', and 'th' recursively, each time adding the letter you left out to the beginning of each anagram of each of the substrings.  Work this out with a pencil and paper if you want to understand better how it works.

This algorithm is O(n!), so keep the input phrases short. 

Note that this algorithm is not fully recursive; it does contain a loop.

Use a simple driver script, an Anagramizer class, and a WordList class.  WordList will need a contains() method, which determines whether a particular string is a valid word.  This method should use binary, not linear, search (lists are implemented in CPython with arrays of pointers, so binary search of a list is O(log n)).  Design the class so that you only sort the list *once*, after it is read in, not in the contains() method, which will be called many times.  You must code the binary search yourself, but you may use Python's list sort() function rather than coding the sort yourself.
